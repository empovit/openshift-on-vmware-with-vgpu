---
- name: Single-Node OpenShift (SNO) with NVIDIA vGPU on VMware
  gather_facts: no
  hosts: localhost
  temp_directory: "{{ playbook_dir }}/tmp"

  roles:
    - karmab.ansible_aicli_modules

  pre_tasks:

    - name: Install Python prerequisites
      pip:
        name: aicli>=99.0.202205110654.202103111306
        state: present

    - name: Create temp directory
      file:
        path: "{{ temp_directory }}"
        state: directory

- hosts: localhost
  gather_facts: no
  roles:
    - vsphere

- hosts: bastion
  gather_facts: no
  roles:
    - role: esxi_connections
    - role: vgpu_driver
      vars:
        vcenter_ip: "{{ hostvars.localhost.vcenter_ip }}"

- hosts: localhost
  gather_facts: no
  roles:
    - host_graphics
    - karmab.ansible_aicli_modules

  vars:
    vgpu_profile: "grid_v100dx-32c" # Must be a CUDA-supported vGPU type
    ssh_public_key: "~/.ssh/id_rsa.pub"
    openshift_version: "4.10.11"

  tasks:

    - name: Copy script for downloading assisted installer ISO
      copy:
        src: download_iso.py
        dest: bootstrap/download_iso.py
        mode: u=xwr,g=r,o=r
      delegate_to: bastion

    - name: Create assisted SNO cluster
      ai_cluster:
        name: "{{ cluster_name }}"
        state: present
        parameters:
          openshift_version: "{{ openshift_version }}"
          sno: true
          minimal: true
          pull_secret: "{{ pull_secret_path }}"
          base_dns_domain: "{{ openshift_base_domain }}"
          ssh_public_key: "{{ lookup('file', ssh_public_key) }}"
        offlinetoken: "{{ ocm_offline_token }}"

    - name: Read SNO cluster
      ai_cluster_info:
        name: "{{ cluster_name }}"
        offlinetoken: "{{ ocm_offline_token }}"
      register: sno_cluster

    - name: Read SNO cluster's InfraEnv
      ai_infraenv_info:
        name: "{{ cluster_name }}"
        offlinetoken: "{{ ocm_offline_token }}"
      register: sno_infraenv

    # TODO: Avoid downloading if the file is busy - used by an existing VM
    - name: Download assisted installer ISO for SNO cluster
      command: "python3 $HOME/bootstrap/download_iso.py {{ sno_infraenv.download_url }} {{ cluster_name }}.iso"
      args:
        chdir: bootstrap
      delegate_to: bastion
      register: copy_result
      failed_when: "copy_result.rc != 0 and 'Device or resource busy' not in copy_result.stderr" # ignore when the file is locked by an existing VM

    - name: Create a VM for SNO
      community.vmware.vmware_guest:
        hostname: "{{ vcenter_ip }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        folder: /
        datacenter: Metal
        name: "{{ vm_name }}"
        state: present
        guest_id: rhel8_64Guest
        disk:
          - size_gb: 180
            type: thin
            datastore: datastore1
        networks:
          - name: VM Public Net 1
            start_connected: yes
        cdrom:
          - controller_number: 0
            unit_number: 0
            state: present
            type: iso
            iso_path: "[datastore1] {{ cluster_name }}.iso"
        hardware:
          memory_mb: 32768
          num_cpus: 8
          scsi: paravirtual
          boot_firmware: "efi"
        advanced_settings:
          - key: "pciPassthru.use64bitMMIO"
            value: "TRUE"
          - key: "pciPassthru.64bitMMIOSizeGB"
            value: "512"
        wait_for_ip_address: yes
        validate_certs: no
      register: vm

    - name: Power off the VM before adding vGPU
      community.vmware.vmware_guest_powerstate:
        hostname: "{{ vcenter_ip }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        folder: /
        datacenter: Metal
        name: "{{ vm_name }}"
        state: powered-off
        validate_certs: no

    - name: Add a vGPU profile to the VM
      community.vmware.vmware_guest_vgpu:
        hostname: "{{ vcenter_ip }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        folder: /
        datacenter: Metal
        name: "{{ vm_name }}"
        state: present
        vgpu: "{{ vgpu_profile }}"
        validate_certs: no

    - name: Print SNO host connection parameters
      debug:
        msg:
        - "You can now SSH to the OpenShift node: ssh core@{{ vm.instance.hw_eth0.ipaddresses[0] }}"

    - name: Wait for exactly one disconnected (down) host in the cluster
      ai_cluster_info:
        name: "{{ cluster_name }}"
        offlinetoken: "{{ ocm_offline_token }}"
      register: sno_cluster
      until: sno_cluster.hosts | length == 1 and sno_cluster.hosts[0].status == 'disconnected'
      when: sno_cluster.status != 'installed'
      retries: 10
      delay: 60

    - name: Power on the VM after adding vGPU
      community.vmware.vmware_guest_powerstate:
        hostname: "{{ vcenter_ip }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        folder: /
        datacenter: Metal
        name: "{{ vm_name }}"
        state: powered-on
        validate_certs: no

    - name: Set SNO hostname (instead of localhost)
      ai_host:
        name: "{{ sno_cluster.hosts[0].id }}"
        state: present
        parameters:
          requested_hostname: "{{ openshift_node_hostname }}"
        offlinetoken: "{{ ocm_offline_token }}"
      when: sno_cluster.status != 'installed'

    # TODO: Improve the ai_cluster role to handle `ready` state
    - name: Wait for the SNO cluster to become ready
      ai_cluster_info:
        name: "{{ cluster_name }}"
        offlinetoken: "{{ ocm_offline_token }}"
      register: sno_cluster
      when: sno_cluster.status != 'installed'
      until: sno_cluster.status == 'ready'
      retries: 20
      delay: 30

    - name: Install the SNO cluster
      ai_cluster:
        name: "{{ cluster_name }}"
        state: installed
        offlinetoken: "{{ ocm_offline_token }}"

    - name: Download cluster kubeconfig
      command: "aicli --token {{ ocm_offline_token }} download kubeconfig --path tmp/ {{ sno_cluster.id }}"

    - name: Download cluster password
      command: "aicli --token {{ ocm_offline_token }} download kubeadmin-password --path tmp/ {{ sno_cluster.id }}"

    - name: Get installed cluster
      ai_cluster_info:
        name: "{{ cluster_name }}"
        offlinetoken: "{{ ocm_offline_token }}"
      register: sno_cluster

    - include_role:
        name: gpu_operator
      vars:
        openshift_api_vip: "{{ sno_cluster.api_vip }}"
        kubeconfig: "{{ playbook_dir }}/tmp/kubeconfig.{{ sno_cluster.id }}"

    - name: Print deployment complete message
      debug:
        msg:
        - "Deployment complete!"
        - "> Update DNS records is needed (e.g. in /etc/hosts or /etc/resolv.conf)"
        - "> export KUBECONFIG={{ playbook_dir }}/tmp/kubeconfig.{{ sno_cluster.id }}"
        - "> kubeadmin password in {{ playbook_dir }}/tmp/kubeadmin-password.{{ sno_cluster.id }}"
